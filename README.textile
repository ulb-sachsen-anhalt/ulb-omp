
h1. Journal Server OJS / OMP Dokumentation

Die Serversoftware ist Open Source unter der Lizenz "CC BY-SA 3.0.":https://creativecommons.org/licenses/by/3.0/de/ 
Ein Link sollte also auf der Journalseite erscheinen. (Logo PKP)
Projektseite: "Public Knowledge Project":https://pkp.sfu.ca/

h2. Die Server VMs

table{border:1px solid black; padding:10px}.
|_. System |_. URL |_. Zugang |_. Beschreibung |
|^. OJS |^. Produktion: "public.bibliothek.uni-halle.de":https://public.bibliothek.uni-halle.de
Develop: "publicdev.bibliothek.uni-halle.de":https://publicdev.bibliothek.uni-halle.de | SSH
- syssc (Thomas Zimmermann ITZ)
- ojs (KeyPass)
- amuyf (A. Bauer ULB) | - Ubuntu 18.04.5 LTS (Bionic Beaver)
- Samba-Share für alle Daten inkl. DB @/data@ (im Backupsystem)
- Docker-Compose 
- gitlab-runner |
|^. OMP |^. Produktion: "omp.bibliothek.uni-halle.de":https://omp.bibliothek.uni-halle.de
Develop: "ompdev.bibliothek.uni-halle.de":https://ompdev.bibliothek.uni-halle.de | SSH
- syssc (Thomas Zimmermann ITZ)
- omp (KeyPass)
- amuyf (A. Bauer ULB) 
| - Ubuntu 20.04.3 LTS (Focal Fossa)
- Samba-Share für alle Daten inkl. DB @/data@ (im Backupsystem)
- Docker-Compose 
- gitlab-runner |



h2.  Quellcode Journalserver


"OJS":https://github.com/pkp/ojs , "Docker-OJS":https://github.com/pkp/docker-ojs , "OMP":https://github.com/pkp/omp 


h2. Quellcode CI/CD Installationssystem

"https://git.itz.uni-halle.de/ulb/ulb-omp":https://git.itz.uni-halle.de/ulb/ulb-omp

"https://git.itz.uni-halle.de/ulb/ulb-ojs":https://git.itz.uni-halle.de/ulb/ulb-ojs


h2. Docker Compose

Auf den Installationssystemen läuft Docker Compose.
Mit den bekannten Befehlen können die Docker Container beobachtet/besucht werden.

<pre> 
docker ps
docker container exec -it ompprod_app_ulb /bin/sh
docker container exec -it ompdev_app_ulb /bin/sh
</pre> 


Installationsroot befindet sich jeweils in:
* OMS:  @/home/gitlab-runner/builds/<build_id>/0/ulb/ulb-omp@
* OJS: @/home/gitlab-runner/builds/<build_id>/0/ulb/ulb-ojs@


Hier befinden sich die ausführbaren Scripte: @start-omp, stop-omp@ bzw. @start-ojs, stop-ojs@ 
Diese kapseln nur den längeren @docker-compose@ Aufruf und velangen die Parameter _dev_ bzw. _prod_
Mit jedem push ins ULB-gitlab (ojs/omp) des ITZ, startet eine CI/CD pipeline.
Der gitlab-runner auf dem Installationssystem checkt die Aktualisierungen aus und startet die Container neu mit den entsprechenden Anpassungen.
Im ersten Schritt startet das Development System neu. Siehe: _.gitlab-ci.yml_
Sollte es Probleme geben, bleibt das Produktionssystem weiterhin aktiv und wird nicht neu gestartet.
Die CI/CD Pipline scheitert; Fehler können behoben werden.
Um den Aufbau vom _dev_ und _prod_ System zu verstehen, muss das @./build.sh@ Script untersucht werden.
Grundsätzlich sind beide Systeme identisch. Sie haben nur eine eigene getrennte Datenbasis in @/data@.
Beim Bau wird von der @docker-compose-{omp/ojs}prod.yml@ eine Kopie @docker-compose-{omp/ojs}dev.yml@ erstellt und mit @sed@ die _volumes_ und _ports_ angepasst.
Die Develop Container haben gar keine Ports nach außen geöffnet. 
Den kompletten Traffic nimmt der Produktions Container entgegen und leitet ihn über ein Docker network an den Develop Container weiter. 
Der Develop Container ist also ohne laufenden Produktions Container nicht erreichbar!
Die Weiterleitung übernimmt Apache (ProxyPass) mit den Configurationsfiles in @./resources/*.conf@
Weitere grundsätzliche Einstellungen (Email/PWD, etc.) befinden sich in den Dateien
@./resources/omp.config.inc.php@ bzw. @./resources/ojs.config.inc.php@.





h2. Rechte im @/data@ Verzeichnis

Beispiele für OMP (OJS analog)

@/data/ompprod@
@/data/ompdev@

Die Besitzer hier, entsprechen den uid/gid im velinkten Container.
Da diese Ordner/Unterordner von den Containern eingebunden werden, sollten diese Rechte analog gesetzt werden:

Im Application (OMP) container _ompprod_app_ulb_

<pre>
id apache   
uid=100(apache) gid=101(apache) groups=101(apache),82(www-data),101(apache)
</pre>


Im Database (MariaDb) container ompprod_db_ulb

<pre>
id mysql  
uid=999(mysql) gid=999(mysql) groups=999(mysql)
</pre>


also:

<pre>
sudo chown 100:100  /data/ompprod/ -R
sudo chown 999:999  /data/ompprod/logs/db -R 
sudo chown 999:999  /data/ompprod/db -R 
</pre>


h2. Backup

Alle Notwendigen Daten, die zum Betrieb von OMP/OJS notwendig sind, befinden sich sich im Verzeichnis @/data@.
Das Verzeichnis ist in der Bandsicherung der ITZ.
Mit dem Data Verzeichnis und dem GIT Repo, läßt sich das komplette System neu erstellen.
Bei jeder Aktualisierung, die ja das @build.sh@ Script aufruft, wird ein Datenbankdump in @/data/ompprod/sqldumps@ abgelegt.
Für das OJS System läuft ein Cronjob, der das @/data@ Verzeichnis packt und auf den OMP Server kopiert.
